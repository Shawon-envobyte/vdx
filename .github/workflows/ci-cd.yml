name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: tiktok-downloader
  REGION: us-central1

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.12]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black isort mypy
    
    - name: Code formatting check (Black)
      run: black --check --diff .
    
    - name: Import sorting check (isort)
      run: isort --check-only --diff .
    
    - name: Linting (flake8)
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Type checking (mypy)
      run: mypy app.py config.py monitoring.py --ignore-missing-imports
    
    - name: Run tests with coverage
      run: |
        pytest test_app.py --cov=. --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Bandit Security Scan
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-report.json || true
    
    - name: Run Safety Check
      run: |
        pip install safety
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  docker-build:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image (test)
      run: |
        docker build -t test-image .
    
    - name: Test Docker image
      run: |
        docker run --rm -d -p 8080:8080 --name test-container test-image
        sleep 10
        curl -f http://localhost:8080/health || exit 1
        docker stop test-container
    
    - name: Build optimized Docker image
      run: |
        docker build -f Dockerfile.optimized -t optimized-image .
    
    - name: Build multi-stage Docker image
      run: |
        docker build -f Dockerfile.multistage -t multistage-image .

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
    
    - name: Configure Docker for GCR
      run: gcloud auth configure-docker
    
    - name: Build and push Docker image
      run: |
        docker build -f Dockerfile.optimized -t gcr.io/$PROJECT_ID/$SERVICE_NAME:staging-${{ github.sha }} .
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:staging-${{ github.sha }}
    
    - name: Deploy to Cloud Run (Staging)
      run: |
        gcloud run deploy $SERVICE_NAME-staging \
          --image gcr.io/$PROJECT_ID/$SERVICE_NAME:staging-${{ github.sha }} \
          --region $REGION \
          --platform managed \
          --allow-unauthenticated \
          --port 8080 \
          --memory 2Gi \
          --cpu 2 \
          --timeout 3600 \
          --max-instances 5 \
          --min-instances 0 \
          --concurrency 80 \
          --set-env-vars FLASK_ENV=production

  deploy-production:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
    
    - name: Configure Docker for GCR
      run: gcloud auth configure-docker
    
    - name: Build and push Docker image
      run: |
        docker build -f Dockerfile.multistage -t gcr.io/$PROJECT_ID/$SERVICE_NAME:${{ github.sha }} .
        docker build -f Dockerfile.multistage -t gcr.io/$PROJECT_ID/$SERVICE_NAME:latest .
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:${{ github.sha }}
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:latest
    
    - name: Deploy to Cloud Run (Production)
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image gcr.io/$PROJECT_ID/$SERVICE_NAME:${{ github.sha }} \
          --region $REGION \
          --platform managed \
          --allow-unauthenticated \
          --port 8080 \
          --memory 2Gi \
          --cpu 2 \
          --timeout 3600 \
          --max-instances 10 \
          --min-instances 0 \
          --concurrency 80 \
          --set-env-vars FLASK_ENV=production
    
    - name: Run smoke tests
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format='value(status.url)')
        curl -f $SERVICE_URL/health
        curl -f $SERVICE_URL/api

  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: Cleanup old images
      run: |
        # Keep only the last 5 images
        gcloud container images list-tags gcr.io/$PROJECT_ID/$SERVICE_NAME \
          --limit=999999 --sort-by=TIMESTAMP \
          --format='get(digest)' | tail -n +6 | \
          xargs -I {} gcloud container images delete gcr.io/$PROJECT_ID/$SERVICE_NAME@{} --force-delete-tags --quiet || true